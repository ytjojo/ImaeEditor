//import com.android.build.gradle.BaseExtension

apply plugin: 'maven-publish'
apply plugin: 'signing'
def AndroidGroup = "com.wogoo.android"


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def accountName = properties.getProperty('accountName')
def accountPassword = properties.getProperty('accountPassword')



if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from android.sourceSets.main.java.srcDirs
        exclude "**/R.class"
        exclude "**/BuildConfig.class"
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}


artifacts {
    archives sourcesJar
}


afterEvaluate {
    publishing {
        def artifactIdPom = project.hasProperty("POM_ARTIFACT_ID") ? project.property("POM_ARTIFACT_ID").toString() : project.name

        def projectVersionName = libraryVersion


        if (project.plugins.hasPlugin("com.android.library") || project.plugins.hasPlugin("com.android.application")) {
            println("android config")
            projectVersionName = project.android.defaultConfig.versionName
            if (projectVersionName == null || projectVersionName.equals("")) {
                projectVersionName = libraryVersion
            }

//            projectVersionName = project.extensions.findByType(com.android.build.gradle.BaseExtension.class).defaultConfig.versionName
        } else {
            projectVersionName = libraryVersion
        }


        def versionName = project.hasProperty("VERSION_NAME") ? project.property("VERSION_NAME").toString() : projectVersionName
        def groupName = project.hasProperty("POM_GROUP") ? project.property("GROUP").toString() : AndroidGroup
        def releaseUrl = "http://nexus.wogoo.com/repository/maven-release/"
        def snapshotUrl = "http://nexus.wogoo.com/repository/maven-snapshot/"

        println(projectVersionName)
        println(groupName)
        println(artifactIdPom)
        repositories {
            // 本地仓库
            maven {
                name('local')
                url uri("../repo")
            }
            // 远程仓库
            maven {
                allowInsecureProtocol(true)
                name('remote')
                url = versionName.contains("SNAPSHOT") ? snapshotUrl : releaseUrl
                credentials {
                    username = "${accountName}"// 账号
                    password = "${accountPassword}"// 密码
                }
            }
        }
        publications {

            if (project.hasProperty("android")) {
                debugType(MavenPublication) {
                    from components.debug
                    groupId groupName
                    artifactId artifactIdPom
                    version versionName
                    artifact sourcesJar
                }
                releaseType(MavenPublication) {
                    from components.release
                    groupId groupName
                    artifactId artifactIdPom
                    version versionName
                    artifact sourcesJar
                }
            } else {
                maven(MavenPublication) {
                    groupId groupName
                    artifactId artifactIdPom
                    version versionName
                    artifact sourcesJar
                    from components.java
                }
            }

        }
    }
}

//signing {
//    sign publishing.publications
//}

